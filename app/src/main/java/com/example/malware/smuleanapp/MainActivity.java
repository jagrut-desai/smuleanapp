package com.example.malware.smuleanapp;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.SearchView;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Interpolator;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.NetworkImageView;
import com.android.volley.toolbox.Volley;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {

    SearchView searchView;
    MenuItem myActionMenuItem;
    RequestQueue queue;
    static String TAG = "MAIN";

    //network request info
    static String BASE_ADDRESS = "https://api.cognitive.microsoft.com/bing/v5.0/images/search?q=";
    String currentQuery = "music is life";
    String OFFSET  = "offset=";
    String COUNT  = "count=";
    String AND = "&";
    int currentOffset = 0;
    int countPerRequest = 20;
    String MARKET = "mkt=en-us";
    String SEARCH_MODE = "safeSearch=Moderate";

    //Store Image URLs
    ArrayList<String> images = new ArrayList<String>();
    GridView imageGridView;
    MyPhotoGridAdapter gridAdapter;

    //Serch Text Related
    TextView searchText;
    static String SEARCH = "Search Text: ";

    //restore visible child position
    int position = 0;

    //music service
    Intent musicService;

    //progess dialog
    ProgressDialog progressDialog;

    //Creates UI and some network component to make requests
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //check netowrk connection
        if(checkConnection()) {

            queue = Volley.newRequestQueue(this);
            makeRequest();

            // get the gridview
            imageGridView = (GridView) findViewById(R.id.boardPhotos);
            //initialize infinite scrolling for paginaton.
            InfiniteScrollListner infiniteScrollListner = new InfiniteScrollListner(countPerRequest / 2) {
                @Override
                public boolean onLoadMore(int page, int totalItemsCount) {
                    Log.d("page", "" + page);
                    Log.d("toatlitems", "" + totalItemsCount);
                    currentOffset = currentOffset + 20;
                    Log.d("offset", "" + currentOffset);
                    makeRequest();
                    return true;
                }
            };
            //set scroll listner to gridview.
            imageGridView.setOnScrollListener(infiniteScrollListner);

            //Share it with other apps as link.
            imageGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                    Log.d("i= ", i + "");
                    Intent shareIntent = new Intent();
                    shareIntent.setAction(Intent.ACTION_SEND);
                    shareIntent.putExtra(Intent.EXTRA_TEXT, images.get(i));
                    shareIntent.setType("text/plain");
                    startActivity(Intent.createChooser(shareIntent, "Share Image"));
                }
            });

            searchText = (TextView) findViewById(R.id.search_text);
            searchText.setText(SEARCH + currentQuery);
        }
        //network not available do not show images
        //music still plays because it is essential to make app smulean
        else
        {
            //Dialog box for telling user to turn on wifi.
            AlertDialog.Builder dialog = new AlertDialog.Builder(this);
            dialog.setTitle("Check WiFi Connecton").setMessage("Turn on your WiFi connection and press Ok");
            dialog.setNegativeButton("Ok", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialogInterface, int i) {
                    MainActivity.this.recreate();
                }
            });

            AlertDialog alert = dialog.create();
            alert.show();

        }

    }

    //checks is there network connectivity and is it wifi.
    public boolean checkConnection()
    {
        ConnectivityManager cm =
                (ConnectivityManager)this.getSystemService(Context.CONNECTIVITY_SERVICE);

        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        boolean isConnected = activeNetwork != null &&
                activeNetwork.isConnectedOrConnecting();

        boolean isWiFi = activeNetwork.getType() == ConnectivityManager.TYPE_WIFI;

        return isConnected && isWiFi;
    }

    // make request on background thread.
    public void makeRequest()
    {
        //only show progress bar for fetching images one time.
        //everything else is taken care by infinite scrolling.
        progressDialog = new ProgressDialog(this);
        if(currentOffset ==0) {
            progressDialog.setMessage("Fetching Images");
            progressDialog.show();
        }

        // create request
        JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.GET,
                    BASE_ADDRESS+currentQuery+AND+COUNT+countPerRequest+AND+OFFSET+currentOffset+AND+MARKET+AND+SEARCH_MODE,
                    null,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {
                            Log.d("Response", response.toString());
                            parseImages(response);
                            // only set this up first time.
                            if(currentOffset==0) {

                                gridAdapter = new MyPhotoGridAdapter(MainActivity.this
                                        , images);
                                imageGridView.setAdapter(gridAdapter);
                            }

                            progressDialog.dismiss();
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            Log.d("Network Error:", error.getMessage());
                            progressDialog.dismiss();
                        }
                })
                {
                        // this is to change http request header parameter to authenticate request.
                        @Override
                        public Map<String, String> getHeaders() throws AuthFailureError {
                            Map<String, String>  params = new HashMap<String, String>();
                            params.put("Ocp-Apim-Subscription-Key", "0e1fed18cd794283add02266f358d0fd");
                            return params;
                    }
                };

        //set tag so we can cancel request later if needed
        request.setTag(TAG);
        //add request to queue to be executed on background thread.
        queue.add(request);

    }


    // Parse.
    // We can do this in background thread in future.
    public void parseImages(JSONObject response)
    {
        try
        {
            //get json array  of image objects.
            JSONArray imageObjects = response.getJSONArray("value");
            //iterate through
            for(int imageIndex = 0; imageIndex<imageObjects.length(); imageIndex++)
            {
                //only get url for image and save it.
                JSONObject imageObject = (JSONObject) imageObjects.get(imageIndex);
                String url = imageObject.getString("thumbnailUrl");
                if(!images.contains(url))
                    images.add(url);
            }
            gridAdapter.notifyDataSetChanged();
        } catch (Exception e) {
            Log.d("JSON Parsing", e.getMessage());
        }

    }

    // populate search vew inside toolbar.
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.search_item, menu);

        myActionMenuItem = menu.findItem( R.id.action_search);
        searchView = (SearchView) myActionMenuItem.getActionView();
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            //Do Search on given term and clear results.
            @Override
            public boolean onQueryTextSubmit(String query) {
                if( ! searchView.isIconified()) {
                    searchView.setIconified(true);
                }
                myActionMenuItem.collapseActionView();
                searchText.setText(SEARCH + query);
                if(!query.equals(currentQuery))
                {
                    currentQuery = query;
                    currentOffset = 0;
                    gridAdapter.clear();
                    makeRequest();
                }
                return true;
            }
            //do search request as user types
            @Override
            public boolean onQueryTextChange(String s) {
                if(s.length()>0)
                {
                    currentQuery = s;
                    searchText.setText(SEARCH + s);
                    gridAdapter.clear();
                    makeRequest();
                }
                return true;
            }
        });
        return true;
    }

    @Override
    protected void onStart() {
        super.onStart();
        //start playing music
        musicService = new Intent(this, SmuleanIntentService.class);
        startService(musicService);
    }

    //cancel all the requests on background thread.
    //stop the music service.
    @Override
    protected void onStop() {
        super.onStop();
        if(queue!=null)
        queue.cancelAll(TAG);
        stopService(musicService);
    }
}
